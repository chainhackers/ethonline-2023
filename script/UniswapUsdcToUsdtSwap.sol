pragma solidity ^0.8.0;

import {Script, console2} from "forge-std/Script.sol";

import {ProfitPalsVault} from "../src/ProfitPalsVault.sol";
import {IERC20} from "@openzeppelin/token/ERC20/IERC20.sol";
import "../src/ProfitPalsVaultFactory.sol";

contract UniswapUsdcToUsdtSwap is Script {
    IERC20[] public allowedTokens;

    function run() public {
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");
        address payable deployerAddr = payable(vm.addr(deployerPrivateKey));


        GnosisSafeL2 safe = GnosisSafeL2(payable(0xEdCD1a23A2bC674B06D78EB06efB7E73b6Bd79ea));
        bytes memory data = hex"3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000653183ae00000000000000000000000000000000000000000000000000000000000000040a000604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000001000000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000ffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000065590e070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000643770e279d5d0733f21d6dc03a8efbabf3255b4000000000000000000000000000000000000000000000000000000006531880f00000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000586e0951a3f00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002b2791bca1f2de4661ed88a30c99a7a9449aa841740001f47ceb23fd6bc0add59e62ac25578270cff1b9f61900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f6190000000000000000000000006bc825a870804cbcb3327fd1bae051259ae4e98e000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000000000000000600000000000000000000000007ceb23fd6bc0add59e62ac25578270cff1b9f619000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000586e0951a3f";
        address to = 0x643770E279d5D0733F21d6DC03A8efbABf3255B4;
        uint256 value = 0; //value
        Enum.Operation operation = Enum.Operation.Call;
        uint256 safeTxGas = 0;//300 * 1000;
        uint256 baseGas = 0;//35 * 10 ** 9;
        uint256 gasPrice = 0;//100 * 10 ** 9;
        address gasToken = address(0x0000000000000000000000000000000000001010);
        address payable refundReceiver = deployerAddr;

        uint256 nonce = safe.nonce();

        bytes32 txHash = safe.getTransactionHash(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, nonce);
        (uint8 v, bytes32 r, bytes32 s) = vm.sign(deployerPrivateKey, txHash);
        bytes memory signature = bytes.concat(
            r,
            s,
            bytes1(v)
        );

        vm.startBroadcast(deployerPrivateKey);
        safe.execTransaction(
            to,
            value,
            data,
            operation,
            safeTxGas, baseGas, gasPrice, gasToken,
            refundReceiver,
            signature
        );

        vm.stopBroadcast();
    }
}
